// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package database

import (
	"context"
	"net/netip"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, refresh_token, expires_at, ip_address, user_agent)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, refresh_token
`

type CreateSessionParams struct {
	UserID       uuid.UUID
	RefreshToken string
	ExpiresAt    time.Time
	IpAddress    *netip.Addr
	UserAgent    *string
}

type CreateSessionRow struct {
	ID           uuid.UUID
	RefreshToken string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (CreateSessionRow, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserID,
		arg.RefreshToken,
		arg.ExpiresAt,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i CreateSessionRow
	err := row.Scan(&i.ID, &i.RefreshToken)
	return i, err
}

const findValidSessionByToken = `-- name: FindValidSessionByToken :one
SELECT id, user_id, refresh_token, created_at, updated_at, expires_at, revoked_at, ip_address, user_agent FROM sessions
WHERE refresh_token = $1
  AND revoked_at IS NULL
  AND expires_at > now()
`

func (q *Queries) FindValidSessionByToken(ctx context.Context, refreshToken string) (Session, error) {
	row := q.db.QueryRow(ctx, findValidSessionByToken, refreshToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const revokeSessionByToken = `-- name: RevokeSessionByToken :exec
UPDATE sessions
SET revoked_at = now(),
    updated_at = now()
WHERE refresh_token = $1
  AND revoked_at IS NULL
`

func (q *Queries) RevokeSessionByToken(ctx context.Context, refreshToken string) error {
	_, err := q.db.Exec(ctx, revokeSessionByToken, refreshToken)
	return err
}

const updateSessionByToken = `-- name: UpdateSessionByToken :one
UPDATE sessions
SET refresh_token = $2,
    updated_at = now(),
    expires_at = $3
WHERE refresh_token = $1
  AND revoked_at IS NULL
  AND expires_at > now()
RETURNING id, refresh_token
`

type UpdateSessionByTokenParams struct {
	RefreshToken   string
	RefreshToken_2 string
	ExpiresAt      time.Time
}

type UpdateSessionByTokenRow struct {
	ID           uuid.UUID
	RefreshToken string
}

func (q *Queries) UpdateSessionByToken(ctx context.Context, arg UpdateSessionByTokenParams) (UpdateSessionByTokenRow, error) {
	row := q.db.QueryRow(ctx, updateSessionByToken, arg.RefreshToken, arg.RefreshToken_2, arg.ExpiresAt)
	var i UpdateSessionByTokenRow
	err := row.Scan(&i.ID, &i.RefreshToken)
	return i, err
}
