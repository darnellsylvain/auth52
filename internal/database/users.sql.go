// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, encrypted_password, activated, provider) 
VALUES ($1, $2, $3, $4, $5) 
RETURNING id, created_at, version
`

type CreateUserParams struct {
	Name              *string
	Email             string
	EncryptedPassword []byte
	Activated         bool
	Provider          string
}

type CreateUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	Version   int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.EncryptedPassword,
		arg.Activated,
		arg.Provider,
	)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Version)
	return i, err
}

const findAllUsers = `-- name: FindAllUsers :many
SELECT id, created_at, name, email, encrypted_password, activated, provider, version FROM users
`

func (q *Queries) FindAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, findAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.Email,
			&i.EncryptedPassword,
			&i.Activated,
			&i.Provider,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, created_at, name, email, encrypted_password, activated, provider 
FROM users 
WHERE email = $1
`

type FindUserByEmailRow struct {
	ID                uuid.UUID
	CreatedAt         time.Time
	Name              *string
	Email             string
	EncryptedPassword []byte
	Activated         bool
	Provider          string
}

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (FindUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i FindUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.EncryptedPassword,
		&i.Activated,
		&i.Provider,
	)
	return i, err
}
